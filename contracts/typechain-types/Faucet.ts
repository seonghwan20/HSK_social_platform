/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FaucetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FundGame"
      | "addCommittee"
      | "betAmount"
      | "cancelGame"
      | "checkGameStatus"
      | "committeeCount"
      | "committeeList"
      | "gameActive"
      | "gameDeadline"
      | "gameValid"
      | "getGameStatus"
      | "getPlayers"
      | "isVotingPhase"
      | "minimumCommittee"
      | "player1"
      | "player2"
      | "startGame"
      | "stash"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CommitteeAdded"
      | "GameCancelled"
      | "GameEnded"
      | "GameFunded"
      | "GameStarted"
      | "MinimumCommitteeMet"
      | "VotingPhaseStarted"
  ): EventFragment;

  encodeFunctionData(functionFragment: "FundGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addCommittee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "betAmount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkGameStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "committeeCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "committeeList",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gameActive",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameDeadline",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gameValid", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGameStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isVotingPhase",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumCommittee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "player1", values?: undefined): string;
  encodeFunctionData(functionFragment: "player2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "stash", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "FundGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCommittee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "betAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkGameStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "committeeCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "committeeList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameActive", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameDeadline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameValid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isVotingPhase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumCommittee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "player1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "player2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace CommitteeAddedEvent {
  export type InputTuple = [member: AddressLike];
  export type OutputTuple = [member: string];
  export interface OutputObject {
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameCancelledEvent {
  export type InputTuple = [reason: string];
  export type OutputTuple = [reason: string];
  export interface OutputObject {
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameEndedEvent {
  export type InputTuple = [winner: AddressLike];
  export type OutputTuple = [winner: string];
  export interface OutputObject {
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameFundedEvent {
  export type InputTuple = [funder: AddressLike, amount: BigNumberish];
  export type OutputTuple = [funder: string, amount: bigint];
  export interface OutputObject {
    funder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameStartedEvent {
  export type InputTuple = [deadline: BigNumberish, totalPot: BigNumberish];
  export type OutputTuple = [deadline: bigint, totalPot: bigint];
  export interface OutputObject {
    deadline: bigint;
    totalPot: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinimumCommitteeMetEvent {
  export type InputTuple = [count: BigNumberish];
  export type OutputTuple = [count: bigint];
  export interface OutputObject {
    count: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingPhaseStartedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Faucet extends BaseContract {
  connect(runner?: ContractRunner | null): Faucet;
  waitForDeployment(): Promise<this>;

  interface: FaucetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FundGame: TypedContractMethod<[], [void], "payable">;

  addCommittee: TypedContractMethod<
    [newMember: AddressLike],
    [void],
    "nonpayable"
  >;

  betAmount: TypedContractMethod<[], [bigint], "view">;

  cancelGame: TypedContractMethod<[], [void], "nonpayable">;

  checkGameStatus: TypedContractMethod<[], [string], "nonpayable">;

  committeeCount: TypedContractMethod<[], [bigint], "view">;

  committeeList: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  gameActive: TypedContractMethod<[], [boolean], "view">;

  gameDeadline: TypedContractMethod<[], [bigint], "view">;

  gameValid: TypedContractMethod<[], [boolean], "view">;

  getGameStatus: TypedContractMethod<
    [],
    [
      [boolean, boolean, boolean, bigint, bigint, bigint, bigint] & {
        isActive: boolean;
        isValid: boolean;
        inVotingPhase: boolean;
        deadline: bigint;
        currentCommitteeCount: bigint;
        requiredCommitteeCount: bigint;
        timeRemaining: bigint;
      }
    ],
    "view"
  >;

  getPlayers: TypedContractMethod<[], [[string, string]], "view">;

  isVotingPhase: TypedContractMethod<[], [boolean], "view">;

  minimumCommittee: TypedContractMethod<[], [bigint], "view">;

  player1: TypedContractMethod<[], [string], "view">;

  player2: TypedContractMethod<[], [string], "view">;

  startGame: TypedContractMethod<
    [_durationInDays: BigNumberish],
    [void],
    "nonpayable"
  >;

  stash: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdraw: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FundGame"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "addCommittee"
  ): TypedContractMethod<[newMember: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "betAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "cancelGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "checkGameStatus"
  ): TypedContractMethod<[], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "committeeCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "committeeList"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "gameActive"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "gameDeadline"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gameValid"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "getGameStatus"
  ): TypedContractMethod<
    [],
    [
      [boolean, boolean, boolean, bigint, bigint, bigint, bigint] & {
        isActive: boolean;
        isValid: boolean;
        inVotingPhase: boolean;
        deadline: bigint;
        currentCommitteeCount: bigint;
        requiredCommitteeCount: bigint;
        timeRemaining: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayers"
  ): TypedContractMethod<[], [[string, string]], "view">;
  getFunction(
    nameOrSignature: "isVotingPhase"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "minimumCommittee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "player1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "player2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "startGame"
  ): TypedContractMethod<[_durationInDays: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stash"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "CommitteeAdded"
  ): TypedContractEvent<
    CommitteeAddedEvent.InputTuple,
    CommitteeAddedEvent.OutputTuple,
    CommitteeAddedEvent.OutputObject
  >;
  getEvent(
    key: "GameCancelled"
  ): TypedContractEvent<
    GameCancelledEvent.InputTuple,
    GameCancelledEvent.OutputTuple,
    GameCancelledEvent.OutputObject
  >;
  getEvent(
    key: "GameEnded"
  ): TypedContractEvent<
    GameEndedEvent.InputTuple,
    GameEndedEvent.OutputTuple,
    GameEndedEvent.OutputObject
  >;
  getEvent(
    key: "GameFunded"
  ): TypedContractEvent<
    GameFundedEvent.InputTuple,
    GameFundedEvent.OutputTuple,
    GameFundedEvent.OutputObject
  >;
  getEvent(
    key: "GameStarted"
  ): TypedContractEvent<
    GameStartedEvent.InputTuple,
    GameStartedEvent.OutputTuple,
    GameStartedEvent.OutputObject
  >;
  getEvent(
    key: "MinimumCommitteeMet"
  ): TypedContractEvent<
    MinimumCommitteeMetEvent.InputTuple,
    MinimumCommitteeMetEvent.OutputTuple,
    MinimumCommitteeMetEvent.OutputObject
  >;
  getEvent(
    key: "VotingPhaseStarted"
  ): TypedContractEvent<
    VotingPhaseStartedEvent.InputTuple,
    VotingPhaseStartedEvent.OutputTuple,
    VotingPhaseStartedEvent.OutputObject
  >;

  filters: {
    "CommitteeAdded(address)": TypedContractEvent<
      CommitteeAddedEvent.InputTuple,
      CommitteeAddedEvent.OutputTuple,
      CommitteeAddedEvent.OutputObject
    >;
    CommitteeAdded: TypedContractEvent<
      CommitteeAddedEvent.InputTuple,
      CommitteeAddedEvent.OutputTuple,
      CommitteeAddedEvent.OutputObject
    >;

    "GameCancelled(string)": TypedContractEvent<
      GameCancelledEvent.InputTuple,
      GameCancelledEvent.OutputTuple,
      GameCancelledEvent.OutputObject
    >;
    GameCancelled: TypedContractEvent<
      GameCancelledEvent.InputTuple,
      GameCancelledEvent.OutputTuple,
      GameCancelledEvent.OutputObject
    >;

    "GameEnded(address)": TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;
    GameEnded: TypedContractEvent<
      GameEndedEvent.InputTuple,
      GameEndedEvent.OutputTuple,
      GameEndedEvent.OutputObject
    >;

    "GameFunded(address,uint256)": TypedContractEvent<
      GameFundedEvent.InputTuple,
      GameFundedEvent.OutputTuple,
      GameFundedEvent.OutputObject
    >;
    GameFunded: TypedContractEvent<
      GameFundedEvent.InputTuple,
      GameFundedEvent.OutputTuple,
      GameFundedEvent.OutputObject
    >;

    "GameStarted(uint256,uint256)": TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;
    GameStarted: TypedContractEvent<
      GameStartedEvent.InputTuple,
      GameStartedEvent.OutputTuple,
      GameStartedEvent.OutputObject
    >;

    "MinimumCommitteeMet(uint256)": TypedContractEvent<
      MinimumCommitteeMetEvent.InputTuple,
      MinimumCommitteeMetEvent.OutputTuple,
      MinimumCommitteeMetEvent.OutputObject
    >;
    MinimumCommitteeMet: TypedContractEvent<
      MinimumCommitteeMetEvent.InputTuple,
      MinimumCommitteeMetEvent.OutputTuple,
      MinimumCommitteeMetEvent.OutputObject
    >;

    "VotingPhaseStarted()": TypedContractEvent<
      VotingPhaseStartedEvent.InputTuple,
      VotingPhaseStartedEvent.OutputTuple,
      VotingPhaseStartedEvent.OutputObject
    >;
    VotingPhaseStarted: TypedContractEvent<
      VotingPhaseStartedEvent.InputTuple,
      VotingPhaseStartedEvent.OutputTuple,
      VotingPhaseStartedEvent.OutputObject
    >;
  };
}
