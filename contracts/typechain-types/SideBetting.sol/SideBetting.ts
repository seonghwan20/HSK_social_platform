/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SideBettingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PERCENTAGE_BASE"
      | "bets"
      | "calculateOdds"
      | "claimWinnings"
      | "createGame"
      | "faucetContract"
      | "games"
      | "getContractBalance"
      | "getGameStats"
      | "houseEdge"
      | "owner"
      | "placeBet"
      | "playerTotalBets"
      | "setGameResult"
      | "transferOwnership"
      | "updateFaucetContract"
      | "updateHouseEdge"
      | "withdrawHouseFees"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BetClaimed"
      | "BetPlaced"
      | "GameCreated"
      | "GameResultSet"
      | "HouseEdgeUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PERCENTAGE_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOdds",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWinnings",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "faucetContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "houseEdge", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "placeBet",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "playerTotalBets",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFaucetContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateHouseEdge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawHouseFees",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "PERCENTAGE_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateOdds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWinnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "faucetContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "houseEdge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "placeBet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerTotalBets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFaucetContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateHouseEdge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawHouseFees",
    data: BytesLike
  ): Result;
}

export namespace BetClaimedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    bettor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [gameId: bigint, bettor: string, amount: bigint];
  export interface OutputObject {
    gameId: bigint;
    bettor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BetPlacedEvent {
  export type InputTuple = [
    gameId: BigNumberish,
    bettor: AddressLike,
    playerChoice: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    gameId: bigint,
    bettor: string,
    playerChoice: string,
    amount: bigint
  ];
  export interface OutputObject {
    gameId: bigint;
    bettor: string;
    playerChoice: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameCreatedEvent {
  export type InputTuple = [gameId: BigNumberish];
  export type OutputTuple = [gameId: bigint];
  export interface OutputObject {
    gameId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameResultSetEvent {
  export type InputTuple = [gameId: BigNumberish, winner: AddressLike];
  export type OutputTuple = [gameId: bigint, winner: string];
  export interface OutputObject {
    gameId: bigint;
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HouseEdgeUpdatedEvent {
  export type InputTuple = [newHouseEdge: BigNumberish];
  export type OutputTuple = [newHouseEdge: bigint];
  export interface OutputObject {
    newHouseEdge: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SideBetting extends BaseContract {
  connect(runner?: ContractRunner | null): SideBetting;
  waitForDeployment(): Promise<this>;

  interface: SideBettingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PERCENTAGE_BASE: TypedContractMethod<[], [bigint], "view">;

  bets: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, string, boolean] & {
        bettor: string;
        amount: bigint;
        playerChoice: string;
        claimed: boolean;
      }
    ],
    "view"
  >;

  calculateOdds: TypedContractMethod<
    [gameId: BigNumberish, playerChoice: AddressLike],
    [bigint],
    "view"
  >;

  claimWinnings: TypedContractMethod<
    [gameId: BigNumberish, betIndices: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  createGame: TypedContractMethod<[gameId: BigNumberish], [void], "nonpayable">;

  faucetContract: TypedContractMethod<[], [string], "view">;

  games: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, boolean, string, bigint, boolean] & {
        exists: boolean;
        resultSet: boolean;
        winner: string;
        totalPool: bigint;
        payoutComplete: boolean;
      }
    ],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getGameStats: TypedContractMethod<
    [gameId: BigNumberish],
    [
      [bigint, string, boolean, bigint, bigint] & {
        totalPool: bigint;
        winner: string;
        resultSet: boolean;
        player1BetAmount: bigint;
        player2BetAmount: bigint;
      }
    ],
    "view"
  >;

  houseEdge: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  placeBet: TypedContractMethod<
    [gameId: BigNumberish, playerChoice: AddressLike],
    [void],
    "payable"
  >;

  playerTotalBets: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  setGameResult: TypedContractMethod<
    [gameId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFaucetContract: TypedContractMethod<
    [newFaucetAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateHouseEdge: TypedContractMethod<
    [newHouseEdge: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawHouseFees: TypedContractMethod<
    [gameId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PERCENTAGE_BASE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bets"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, bigint, string, boolean] & {
        bettor: string;
        amount: bigint;
        playerChoice: string;
        claimed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateOdds"
  ): TypedContractMethod<
    [gameId: BigNumberish, playerChoice: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimWinnings"
  ): TypedContractMethod<
    [gameId: BigNumberish, betIndices: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createGame"
  ): TypedContractMethod<[gameId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "faucetContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "games"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [boolean, boolean, string, bigint, boolean] & {
        exists: boolean;
        resultSet: boolean;
        winner: string;
        totalPool: bigint;
        payoutComplete: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGameStats"
  ): TypedContractMethod<
    [gameId: BigNumberish],
    [
      [bigint, string, boolean, bigint, bigint] & {
        totalPool: bigint;
        winner: string;
        resultSet: boolean;
        player1BetAmount: bigint;
        player2BetAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "houseEdge"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "placeBet"
  ): TypedContractMethod<
    [gameId: BigNumberish, playerChoice: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "playerTotalBets"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setGameResult"
  ): TypedContractMethod<[gameId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFaucetContract"
  ): TypedContractMethod<[newFaucetAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateHouseEdge"
  ): TypedContractMethod<[newHouseEdge: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawHouseFees"
  ): TypedContractMethod<[gameId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BetClaimed"
  ): TypedContractEvent<
    BetClaimedEvent.InputTuple,
    BetClaimedEvent.OutputTuple,
    BetClaimedEvent.OutputObject
  >;
  getEvent(
    key: "BetPlaced"
  ): TypedContractEvent<
    BetPlacedEvent.InputTuple,
    BetPlacedEvent.OutputTuple,
    BetPlacedEvent.OutputObject
  >;
  getEvent(
    key: "GameCreated"
  ): TypedContractEvent<
    GameCreatedEvent.InputTuple,
    GameCreatedEvent.OutputTuple,
    GameCreatedEvent.OutputObject
  >;
  getEvent(
    key: "GameResultSet"
  ): TypedContractEvent<
    GameResultSetEvent.InputTuple,
    GameResultSetEvent.OutputTuple,
    GameResultSetEvent.OutputObject
  >;
  getEvent(
    key: "HouseEdgeUpdated"
  ): TypedContractEvent<
    HouseEdgeUpdatedEvent.InputTuple,
    HouseEdgeUpdatedEvent.OutputTuple,
    HouseEdgeUpdatedEvent.OutputObject
  >;

  filters: {
    "BetClaimed(uint256,address,uint256)": TypedContractEvent<
      BetClaimedEvent.InputTuple,
      BetClaimedEvent.OutputTuple,
      BetClaimedEvent.OutputObject
    >;
    BetClaimed: TypedContractEvent<
      BetClaimedEvent.InputTuple,
      BetClaimedEvent.OutputTuple,
      BetClaimedEvent.OutputObject
    >;

    "BetPlaced(uint256,address,address,uint256)": TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;
    BetPlaced: TypedContractEvent<
      BetPlacedEvent.InputTuple,
      BetPlacedEvent.OutputTuple,
      BetPlacedEvent.OutputObject
    >;

    "GameCreated(uint256)": TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;
    GameCreated: TypedContractEvent<
      GameCreatedEvent.InputTuple,
      GameCreatedEvent.OutputTuple,
      GameCreatedEvent.OutputObject
    >;

    "GameResultSet(uint256,address)": TypedContractEvent<
      GameResultSetEvent.InputTuple,
      GameResultSetEvent.OutputTuple,
      GameResultSetEvent.OutputObject
    >;
    GameResultSet: TypedContractEvent<
      GameResultSetEvent.InputTuple,
      GameResultSetEvent.OutputTuple,
      GameResultSetEvent.OutputObject
    >;

    "HouseEdgeUpdated(uint256)": TypedContractEvent<
      HouseEdgeUpdatedEvent.InputTuple,
      HouseEdgeUpdatedEvent.OutputTuple,
      HouseEdgeUpdatedEvent.OutputObject
    >;
    HouseEdgeUpdated: TypedContractEvent<
      HouseEdgeUpdatedEvent.InputTuple,
      HouseEdgeUpdatedEvent.OutputTuple,
      HouseEdgeUpdatedEvent.OutputObject
    >;
  };
}
