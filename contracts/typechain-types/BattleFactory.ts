/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BattleFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptBattle"
      | "allBattleIds"
      | "battles"
      | "createBattle"
      | "getAllBattleIds"
      | "getBattleContracts"
      | "isBattleAccepted"
      | "owner"
      | "sideBettings"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BattleCreated" | "SideBettingCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptBattle",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allBattleIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "battles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBattle",
    values: [BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllBattleIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBattleContracts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBattleAccepted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sideBettings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allBattleIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "battles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllBattleIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBattleContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBattleAccepted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sideBettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace BattleCreatedEvent {
  export type InputTuple = [
    battleId: BigNumberish,
    battleContract: AddressLike,
    player1: AddressLike,
    player2: AddressLike,
    betAmount: BigNumberish
  ];
  export type OutputTuple = [
    battleId: bigint,
    battleContract: string,
    player1: string,
    player2: string,
    betAmount: bigint
  ];
  export interface OutputObject {
    battleId: bigint;
    battleContract: string;
    player1: string;
    player2: string;
    betAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SideBettingCreatedEvent {
  export type InputTuple = [
    battleId: BigNumberish,
    sideBettingContract: AddressLike,
    battleContract: AddressLike
  ];
  export type OutputTuple = [
    battleId: bigint,
    sideBettingContract: string,
    battleContract: string
  ];
  export interface OutputObject {
    battleId: bigint;
    sideBettingContract: string;
    battleContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BattleFactory extends BaseContract {
  connect(runner?: ContractRunner | null): BattleFactory;
  waitForDeployment(): Promise<this>;

  interface: BattleFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptBattle: TypedContractMethod<
    [battleId: BigNumberish, player2: AddressLike],
    [string],
    "nonpayable"
  >;

  allBattleIds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  battles: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createBattle: TypedContractMethod<
    [
      battleId: BigNumberish,
      player1: AddressLike,
      minimumCommittee: BigNumberish,
      betAmount: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  getAllBattleIds: TypedContractMethod<[], [bigint[]], "view">;

  getBattleContracts: TypedContractMethod<
    [battleId: BigNumberish],
    [
      [string, string] & { battleContract: string; sideBettingContract: string }
    ],
    "view"
  >;

  isBattleAccepted: TypedContractMethod<
    [battleId: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  sideBettings: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptBattle"
  ): TypedContractMethod<
    [battleId: BigNumberish, player2: AddressLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allBattleIds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "battles"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createBattle"
  ): TypedContractMethod<
    [
      battleId: BigNumberish,
      player1: AddressLike,
      minimumCommittee: BigNumberish,
      betAmount: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllBattleIds"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getBattleContracts"
  ): TypedContractMethod<
    [battleId: BigNumberish],
    [
      [string, string] & { battleContract: string; sideBettingContract: string }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBattleAccepted"
  ): TypedContractMethod<[battleId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "sideBettings"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "BattleCreated"
  ): TypedContractEvent<
    BattleCreatedEvent.InputTuple,
    BattleCreatedEvent.OutputTuple,
    BattleCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SideBettingCreated"
  ): TypedContractEvent<
    SideBettingCreatedEvent.InputTuple,
    SideBettingCreatedEvent.OutputTuple,
    SideBettingCreatedEvent.OutputObject
  >;

  filters: {
    "BattleCreated(uint256,address,address,address,uint256)": TypedContractEvent<
      BattleCreatedEvent.InputTuple,
      BattleCreatedEvent.OutputTuple,
      BattleCreatedEvent.OutputObject
    >;
    BattleCreated: TypedContractEvent<
      BattleCreatedEvent.InputTuple,
      BattleCreatedEvent.OutputTuple,
      BattleCreatedEvent.OutputObject
    >;

    "SideBettingCreated(uint256,address,address)": TypedContractEvent<
      SideBettingCreatedEvent.InputTuple,
      SideBettingCreatedEvent.OutputTuple,
      SideBettingCreatedEvent.OutputObject
    >;
    SideBettingCreated: TypedContractEvent<
      SideBettingCreatedEvent.InputTuple,
      SideBettingCreatedEvent.OutputTuple,
      SideBettingCreatedEvent.OutputObject
    >;
  };
}
